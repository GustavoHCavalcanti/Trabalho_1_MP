        -:    0:Source:velha.cpp
        -:    0:Graph:velha.gcno
        -:    0:Data:velha.gcda
        -:    0:Runs:3
        -:    1:#include "velha.hpp"
        -:    2:#include <iostream>
        -:    3:
       27:    4:int JogoDaVelha::verificar_jogo(int matriz[3][3]) {
       27:    5:    int num_x = 0, num_o = 0;
        -:    6:
        -:    7:    // Contagem de peças X e O
      108:    8:    for (int i = 0; i < 3; i++) {
      324:    9:        for (int j = 0; j < 3; j++) {
      243:   10:            if (matriz[i][j] == 1) num_x++;
      243:   11:            if (matriz[i][j] == 2) num_o++;
        -:   12:        }
        -:   13:    }
        -:   14:
        -:   15:    // Depuração - Verificar número de peças
       27:   16:    std::cout << "X: " << num_x << " O: " << num_o << std::endl;
        -:   17:
        -:   18:    // Validação do número de peças
       27:   19:    if (num_x - num_o > 1 || num_o - num_x > 1) {
    #####:   20:        return -2; // Jogo impossível
        -:   21:    }
        -:   22:
        -:   23:    // Verifica linhas, colunas e diagonais para vitória
       27:   24:    bool vencedor_x = false, vencedor_o = false;
      108:   25:    for (int i = 0; i < 3; i++) {
       81:   26:        if (matriz[i][0] == matriz[i][1] && matriz[i][1] == matriz[i][2] && matriz[i][0] != 0) {
       15:   27:            if (matriz[i][0] == 1) vencedor_x = true;
       15:   28:            if (matriz[i][0] == 2) vencedor_o = true;
        -:   29:        }
       81:   30:        if (matriz[0][i] == matriz[1][i] && matriz[1][i] == matriz[2][i] && matriz[0][i] != 0) {
       3*:   31:            if (matriz[0][i] == 1) vencedor_x = true;
        3:   32:            if (matriz[0][i] == 2) vencedor_o = true;
        -:   33:        }
        -:   34:    }
        -:   35:
       27:   36:    if (matriz[0][0] == matriz[1][1] && matriz[1][1] == matriz[2][2] && matriz[0][0] != 0) {
       3*:   37:        if (matriz[0][0] == 1) vencedor_x = true;
        3:   38:        if (matriz[0][0] == 2) vencedor_o = true;
        -:   39:    }
      27*:   40:    if (matriz[0][2] == matriz[1][1] && matriz[1][1] == matriz[2][0] && matriz[0][2] != 0) {
    #####:   41:        if (matriz[0][2] == 1) vencedor_x = true;
    #####:   42:        if (matriz[0][2] == 2) vencedor_o = true;
        -:   43:    }
        -:   44:
        -:   45:    // Depuração - Verificar se há vencedor
       27:   46:    std::cout << "Vencedor X: " << vencedor_x << " Vencedor O: " << vencedor_o << std::endl;
        -:   47:
        -:   48:    // Verificação de jogo impossível: 
       27:   49:    if ((vencedor_x && vencedor_o) || (vencedor_x && num_x <= num_o) || (vencedor_o && num_x > num_o)) {
        3:   50:        return -2; // Jogo impossível
        -:   51:    }
        -:   52:
        -:   53:    // Se X venceu
       24:   54:    if (vencedor_x) return 1; // X venceu
        -:   55:    // Se O venceu
       18:   56:    if (vencedor_o) return 2; // O venceu
        -:   57:
        -:   58:    // Verifica se há empate
        9:   59:    bool empate = true;
       36:   60:    for (int i = 0; i < 3; i++) {
      108:   61:        for (int j = 0; j < 3; j++) {
       81:   62:            if (matriz[i][j] == 0) empate = false; // Se houver uma casa vazia, não é empate
        -:   63:        }
        -:   64:    }
        9:   65:    if (empate) return 0; // Empate
        -:   66:
        -:   67:    // Caso não tenha terminado o jogo, retorna indefinido
        6:   68:    return -1; // Jogo indefinido
        -:   69:}
        -:   70:
        -:   71:
        -:   72:
        -:   73:
        -:   74:
        -:   75:
        -:   76:
        -:   77:
        -:   78:
        -:   79:
        -:   80:
        -:   81:
        -:   82:
        -:   83:
